/* generated using openapi-typescript-codegen -- do not edit */
/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
import type { TypeEnum } from './TypeEnum';
/**
 * Serializer for Documents.
 *
 * Recognized primitve fields:
 *
 * * ``StringField``
 * * ``URLField``
 * * ``EmailField``
 * * ``IntField``
 * * ``LongField``
 * * ``FloatField``
 * * ``DecimalField``
 * * ``BooleanField``
 * * ``DateTimeField``
 * * ``ComplexDateTimeField``
 * * ``ObjectIdField``
 * * ``SequenceField`` (assumes it has integer counter)
 * * ``UUIDField``
 * * ``GeoPointField``
 * * ``GeoJsonBaseField`` (all those fields)
 * * ``DateField``
 *
 * Compound fields: ``ListField`` and ``DictField`` are mapped to corresponding DRF fields, with respect to nested field specification.
 *
 * The ``ReferenceField`` is handled like ``ForeignKey`` in DRF: there nested serializer autogenerated if serializer depth greater then 0, otherwise it's handled by it's own (results as ``str(id)``).
 *
 * For ``EmbeddedDocumentField`` also nested serializer autogenerated for non-zero depth, otherwise it is skipped. TODO: THIS IS PROBABLY WRONG AND SHOULD BE FIXED.
 *
 * Generic fields ``GenericReferenceField`` and ``GenericEmbeddedDocumentField`` are handled by their own with corresponding serializer fields.
 *
 * Not well supported or untested:
 *
 * ``FileField``
 * ``ImageField``
 * ``BinaryField``
 *
 * All other fields are mapped to ``DocumentField`` and probably will work wrong.
 */
export type Status = {
    type: TypeEnum;
    readonly timestamp: string;
    readonly user_id: string;
    price?: number;
    date?: string;
    success?: boolean;
};

